{"version":3,"sources":["Modules/CityComponent.js","Modules/WeatherInfoComponent.js","App.js","index.js"],"names":["SearchBox","styled","img","span","form","CityComponent","props","updateQuery","fetchLocation","onSubmit","placeholder","onChange","e","target","value","type","WeatherInfoIcons","Sunset","Sunrise","Humidity","Wind","Pressure","ExitButton","WeatherCondition","div","LocalTime","Location","Temperature","Condition","WeatherLogo","WeatherInfoLabel","WeatherInfoContainer","InfoContainer","InfoIcon","InfoLabel","WeatherInfoComponent","name","additional","src","WeatherHumidComponent","dewPoint","temp","dewPointF","Math","floor","style","textAlign","WeatherComponent","location","weather","icon","data","includes","getSunTime","timeStamp","timezone","d","Date","localOffset","getTimezoneOffset","nd","getTime","toLocaleTimeString","onClick","window","reload","alt","width","properties","address_line1","country","main","temp_max","temp_min","feels_like","offset","localTime","getLocationTime","description","sys","humidity","wind","speed","pressure","OW_API_KEY","Container","App","useState","query","updateLocation","updateWeather","geolocate","a","preventDefault","geoUrl","axios","get","then","response","geoLocation","features","latitude","lat","longitude","lon","catch","error","console","log","url","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAcMA,GAXcC,IAAOC,IAAV,gFAKCD,IAAOE,KAAV,6GAMGF,IAAOG,KAAV,6gBAoDAC,EArBO,SAACC,GACnB,IAAOC,EAA8BD,EAA9BC,YAAaC,EAAiBF,EAAjBE,cAEpB,OAEI,aADA,CACA,qBAGI,eAACR,EAAD,CAAWS,SAAUD,EAArB,UAEI,uBAAOE,YAAa,oBAEbC,SAAU,SAACC,GAAD,OAAML,EAAYK,EAAEC,OAAOC,UAG5C,wBAAQC,KAAM,SAAd,0BCzDHC,EAAmB,CAC5BC,OAAQ,qDACRC,QAAS,sDACTC,SAAU,uDACVC,KAAM,mDACNC,SAAU,wDAuBRC,EAAarB,IAAOE,KAAV,kRAcVoB,EAAmBtB,IAAOuB,IAAV,qMAUhBC,EAAYxB,IAAOE,KAAV,gHAMTuB,EAAWzB,IAAOE,KAAV,0KASRwB,EAAc1B,IAAOE,KAAV,4NAYXyB,EAAY3B,IAAOE,KAAV,iPAYT0B,EAAc5B,IAAOC,IAAV,8GAOX4B,EAAmB7B,IAAOE,KAAV,6JAShB4B,EAAuB9B,IAAOE,KAAV,+LAUpB6B,EAAgB/B,IAAOuB,IAAV,6KASbS,EAAWhC,IAAOC,IAAV,yEAMRgC,EAAYjC,IAAOuB,IAAV,2NAeTW,EAAuB,SAAC7B,GAC1B,IAAO8B,EAA2B9B,EAA3B8B,KAAMtB,EAAqBR,EAArBQ,MAAOuB,EAAc/B,EAAd+B,WAEpB,OACI,eAACL,EAAD,WACI,cAACC,EAAD,CAAUK,IAAKtB,EAAiBoB,KAChC,eAACF,EAAD,WACKpB,EADL,IACauB,EACT,+BAAOD,WAOjBG,EAAwB,SAACjC,GAC3B,IAAO8B,EAAqB9B,EAArB8B,KAAMtB,EAAeR,EAAfQ,MAKP0B,EAD2B,EAAE,GAJPlC,EAARmC,KAIM,KACO,IAAM3B,GAAO,EACxC4B,EAAYC,KAAKC,MAAe,IAARJ,EAAoB,IAClD,OACI,eAACR,EAAD,CAAea,MAPP,CAACC,UAAU,UAOnB,UACI,cAACb,EAAD,CAAUK,IAAKtB,EAAiBoB,KAChC,eAACF,EAAD,WACKpB,EADL,OACgB4B,EADhB,SAEI,+BAVC,4BAwHFK,EAvGU,SAACzC,GACtB,IAAO0C,EAAqB1C,EAArB0C,SAAUC,EAAW3C,EAAX2C,QAOXC,GADQD,EAAQE,KAAKF,QAAQ,GAAGC,KAAKE,SAAS,KACvCH,EAAQE,KAAKF,QAAQ,GAAGC,MAG/BG,EAAa,SAACC,EAAWC,GAC3B,IAAIC,EAAI,IAAIC,KAAiB,IAAZH,GACbI,EAAsC,IAAxBF,EAAEG,oBAChBC,EAAMJ,EAAEK,UAAYH,EAAgB,IAAOH,EAG/C,OAFc,IAAIE,KAAKG,GAEPE,sBAsBpB,OACI,qCAEI,cAACxC,EAAD,UACI,wBAAQyC,QAVD,WAEfC,OAAOhB,SAASiB,QAAO,IAQf,SACK,qBAAK3B,IAAK,yDAA0D4B,IAAK,QAASC,MAAO,YAIlG,cAACzC,EAAD,sCAEMsB,EAAS,GAAGoB,WAAWC,cAF7B,+BAGMrB,EAAS,GAAGoB,WAAWE,QAH7B,wBAOA,eAAC3C,EAAD,iCAEiBgB,KAAKC,MAAMK,EAAQE,KAAKoB,KAAK9B,MAF9C,SAGI,uBAHJ,gBAIWE,KAAKC,MAAMK,EAAQE,KAAKoB,KAAKC,UAJxC,4BAKW7B,KAAKC,MAAMK,EAAQE,KAAKoB,KAAKE,UALxC,SAMI,uBACA,0DACoB9B,KAAKC,MAAMK,EAAQE,KAAKoB,KAAKG,YADjD,eASJ,eAACjD,EAAD,0BAlDgB,SAACkD,GACrB,IAAInB,EAAI,IAAIC,KACRmB,EAAYpB,EAAEK,UACdH,EAAsC,IAAxBF,EAAEG,oBAKpB,OAFS,IAAIF,KAFHmB,EAAYlB,EACL,IAAOiB,GAGdb,qBA2CWe,CAAgB5B,EAAQE,KAAKI,aAG9C,eAAChC,EAAD,WACI,cAACK,EAAD,UACKqB,EAAQE,KAAKF,QAAQ,GAAG6B,cAE7B,cAAC,EAAD,CAAcxC,IAAG,4CAAuCY,EAAvC,gBAGrB,cAACpB,EAAD,2BAEA,eAACC,EAAD,WAKI,cAAC,EAAD,CACIK,KAAM,UACNtB,MAAOuC,EAAWJ,EAAQE,KAAK4B,IAAb,QAA6B9B,EAAQE,KAAKI,YAChE,cAAC,EAAD,CACInB,KAAM,SACNtB,MAAOuC,EAAWJ,EAAQE,KAAK4B,IAAb,OAA4B9B,EAAQE,KAAKI,YAC/D,cAAC,EAAD,CAAuBnB,KAAM,WAAYK,KAAMQ,EAAQE,KAAKoB,KAAK9B,KAAM3B,MAAOmC,EAAQE,KAAKoB,KAAKS,WAChG,cAAC,EAAD,CAAsB5C,KAAM,OAAQC,WAAY,MAAOvB,MAAOmC,EAAQE,KAAK8B,KAAKC,QAChF,cAAC,EAAD,CAAsB9C,KAAM,WAAYC,WAAY,MAAOvB,MAAOmC,EAAQE,KAAKoB,KAAKY,kBChR9FC,EAAa,mCAKbC,EAAYpF,IAAOuB,IAAV,2QA4FA8D,MA9Ef,WAEI,MAA6BC,mBAAS,IAAtC,mBAAOC,EAAP,KAAcjF,EAAd,KAEA,EAAmCgF,mBAAS,IAA5C,mBAAOvC,EAAP,KAAiByC,EAAjB,KAEA,EAAiCF,mBAAS,IAA1C,mBAAOtC,EAAP,KAAgByC,EAAhB,KAwBMC,EAAS,uCAAG,WAAO/E,GAAP,uBAAAgF,EAAA,6DACdhF,EAAEiF,iBAGkB,mCAEdC,EANQ,gEAM0DN,EAN1D,mBAIM,oCAJN,SAURO,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GACFC,EAAcD,EAAS/C,KAAKiD,SAC5BX,EAAeU,GACfE,EAAWH,EAAS/C,KAAKiD,SAAS,GAAGhC,WAAWkC,IAChDC,EAAYL,EAAS/C,KAAKiD,SAAS,GAAGhC,WAAWoC,OAGpDC,OAAM,SAAAC,GACHC,QAAQC,IAAI,iBAAkBF,MAnBxB,aAsBF,WACRG,EAvBU,8DAuBmDR,EAvBnD,gBAuBmEE,GACvDM,GAAY,kBACtCA,GAAG,iBAAczB,GAzBH,UA2BRW,IAAMC,IAAIa,GACXZ,MAAK,SAAAC,GAEFR,EAAcQ,MAEjBO,OAAM,SAAAC,GACHC,QAAQC,IAAI,qBAAsBF,MAjC5B,4CAAH,sDAqCf,OACI,cAACrB,EAAD,UAEKpC,EACG,cAAC,EAAD,CAAkBD,SAAUA,EAAUC,QAASA,IAC/C,cAAC,EAAD,CAAe1C,YAAaA,EAAaC,cAAemF,OChGxEmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.72791cac.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\n//region styled area\r\nconst WeatherLogo = styled.img`\r\n  width: 140px;\r\n  height: 140px;\r\n  margin: 40px;\r\n`\r\nconst CityInput = styled.span`\r\n  color: black;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin: 10px auto;\r\n`\r\nconst SearchBox = styled.form`\r\n  display: flex;\r\n  flex-direction: row;\r\n  border: black solid 1px;\r\n  border-radius: 4px;\r\n  color: black;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin: 20px auto;\r\n\r\n  & input {\r\n    padding: 10px;\r\n    font-size: 14px;\r\n    border: none;\r\n    outline: none;\r\n    font-weight: bold;\r\n  }\r\n\r\n  & button {\r\n    padding: 10px;\r\n    font-size: 14px;\r\n    color: white;\r\n    background-color: black;\r\n    border: none;\r\n    outline: none;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n  }\r\n`\r\n//endregion\r\n\r\nconst CityComponent = (props) => {\r\n    const {updateQuery, fetchLocation} = props\r\n\r\n    return (\r\n        //fragment\r\n        <>\r\n            {/*<WeatherLogo src={\"./icons/perfect-day.svg\"}/>*/}\r\n            {/*<CityInput>Weather</CityInput>*/}\r\n            <SearchBox onSubmit={fetchLocation} >\r\n            {/*<SearchBox onSubmit={getWeather}>*/}\r\n                <input placeholder={\"Enter a location \"}\r\n                       // onChange={(e)=> InputHandler(e.target.value)}\r\n                       onChange={(e)=> updateQuery(e.target.value)}\r\n\r\n                />\r\n                <button type={\"submit\"}>Search</button>\r\n            </SearchBox>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CityComponent;","import styled from \"styled-components\"\r\n\r\n// region icons\r\nexport const WeatherInfoIcons = {\r\n    Sunset: \"https://samalvz.github.io/weather/icons/sunset.svg\",\r\n    Sunrise: \"https://samalvz.github.io/weather/icons/sunrise.svg\",\r\n    Humidity: \"https://samalvz.github.io/weather/icons/humidity.svg\",\r\n    Wind: \"https://samalvz.github.io/weather/icons/wind.svg\",\r\n    Pressure: \"https://samalvz.github.io/weather/icons/pressure.svg\",\r\n}\r\n\r\nexport const WeatherIcons = {\r\n    //no longer used\r\n    \"01d\": \"./icons/sunny.svg\",\r\n    \"01n\": \"./icons/sunset.svg\",\r\n    \"02d\": \"./icons/day.svg\",\r\n    \"02n\": \"./icons/cloudy-sunset.svg\",\r\n    \"03d\": \"./icons/cloudy.svg\",\r\n    \"03n\": \"./icons/cloudy.svg\",\r\n    \"04d\": \"./icons/perfect-day.svg\",\r\n    \"04n\": \"./icons/cloudy-sunset.svg\",\r\n    \"09d\": \"./icons/rain.svg\",\r\n    \"09n\": \"./icons/rain-sunset.svg\",\r\n    \"10d\": \"./icons/rain.svg\",\r\n    \"10n\": \"./icons/rain-sunset.svg\",\r\n    \"11d\": \"./icons/storm.svg\",\r\n    \"11n\": \"./icons/storm.svg\",\r\n}\r\n//endregion\r\n\r\n//region styled region\r\nconst ExitButton = styled.span\r\n    `\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-content: flex-start;\r\n      width: 100%; \r\n      & button {\r\n        width: 10%;\r\n        border: none;\r\n        background-color: transparent;\r\n        cursor: pointer;\r\n      }\r\n    `\r\n\r\nconst WeatherCondition = styled.div\r\n    `\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      width: 100%;\r\n      justify-content: space-between;\r\n      margin: 30px auto;\r\n\r\n    `\r\nconst LocalTime = styled.span\r\n    `\r\n      display: flex;\r\n      flex-direction: row;\r\n      justify-content: left;\r\n    `\r\nconst Location = styled.span\r\n    `\r\n      text-align: center;\r\n      font-size: 25px;\r\n      text-transform: capitalize;\r\n      font-weight: bold;\r\n      margin: 15px auto;\r\n    `\r\n\r\nconst Temperature = styled.span\r\n    `\r\n      margin: 0 0 10px;\r\n      text-transform: capitalize;\r\n      text-align: center;\r\n      font-size: 20px;\r\n      //background: grey;\r\n      & span {\r\n        font-size: 16px\r\n      }\r\n    `\r\n\r\nconst Condition = styled.span\r\n    `\r\n      margin: 5px auto 10px auto;\r\n      text-transform: capitalize;\r\n      font-size: 18px;\r\n      //background: lightcoral;\r\n      & span {\r\n        font-size: 15px;\r\n        font-weight: lighter;\r\n      }\r\n    `\r\n// main image next to weather description\r\nconst WeatherLogo = styled.img\r\n    `\r\n      width: 125px;\r\n      height: 125px;\r\n      margin: 5px auto auto auto;\r\n    `\r\n\r\nconst WeatherInfoLabel = styled.span\r\n    `\r\n      font-size: 14px;\r\n      font-weight: bold;\r\n      margin: 5px 25px 10px;\r\n      text-align: start;\r\n      width: 90%;\r\n    `\r\n\r\nconst WeatherInfoContainer = styled.span\r\n    `\r\n      display: flex;\r\n      width: 90%;\r\n      flex-direction: row;\r\n      justify-content: space-evenly;\r\n      align-items: center;\r\n      flex-wrap: wrap;\r\n    `\r\n\r\nconst InfoContainer = styled.div\r\n    `\r\n      display: flex;\r\n      margin: 5px 10px;\r\n      flex-direction: row;\r\n      justify-content: space-evenly;\r\n      align-items: center;\r\n    `\r\n\r\nconst InfoIcon = styled.img\r\n    `\r\n      width: 36px;\r\n      height: 36px;\r\n    `\r\n\r\nconst InfoLabel = styled.div\r\n    `\r\n      display: flex;\r\n      flex-direction: column;\r\n      font-size: 14px;\r\n      margin: 15px;\r\n\r\n      &span {\r\n        font-size: 12px;\r\n        text-transform: capitalize;\r\n      }\r\n    `\r\n//endregion\r\n\r\n// element for sunrise, sunset, wind, and pressure\r\nconst WeatherInfoComponent = (props) => {\r\n    const {name, value, additional} = props;\r\n\r\n    return (\r\n        <InfoContainer>\r\n            <InfoIcon src={WeatherInfoIcons[name]}/>\r\n            <InfoLabel>\r\n                {value} {additional}\r\n                <span>{name}</span>\r\n            </InfoLabel>\r\n        </InfoContainer>\r\n    )\r\n}\r\n\r\n// element for humidity and dewpoint\r\nconst WeatherHumidComponent = (props) => {\r\n    const {name, value, temp} = props;\r\n    const style={textAlign:\"center\"}\r\n    const text = \"Humid. |dew pnt.\"\r\n    // basic dew point formula -> Td = Tc - ((100 -RH)/5)\r\n    let tempCelsius = (temp - 32) * (5/9)\r\n    const dewPoint = tempCelsius - ((100 - value)/5)\r\n    const dewPointF = Math.floor((dewPoint * (9/5)) + 32)\r\n    return (\r\n        <InfoContainer style={style}>\r\n            <InfoIcon src={WeatherInfoIcons[name]}/>\r\n            <InfoLabel >\r\n                {value}% | {dewPointF} °F\r\n                <span>{text}</span>\r\n            </InfoLabel>\r\n        </InfoContainer>\r\n    )\r\n}\r\n\r\n// element for top half of card\r\nconst WeatherComponent = (props) => {\r\n    const {location, weather} = props;\r\n    //console.log(\"weather.data.weather: \", weather.data.weather)\r\n    //console.log('location component: ', location)\r\n    //console.log('weather component: ', weather)\r\n\r\n    // does openweather return daytime for this location?\r\n    const isDay = weather.data.weather[0].icon.includes('d');\r\n    const icon = weather.data.weather[0].icon;\r\n\r\n    // use provided sunrise/set time and convert to location's local time\r\n    const getSunTime = (timeStamp, timezone) => {\r\n        let d = new Date(timeStamp * 1000)\r\n        let localOffset = d.getTimezoneOffset() * 60000;\r\n        let nd = (d.getTime() + localOffset) + (1000 * timezone)\r\n        let sunTime = new Date(nd)\r\n\r\n        return (sunTime.toLocaleTimeString())\r\n    }\r\n\r\n    // use location timezone to display local time\r\n    const getLocationTime = (offset) =>{\r\n        let d = new Date()\r\n        let localTime = d.getTime()\r\n        let localOffset = d.getTimezoneOffset() * 60000;\r\n        let utc = localTime + localOffset\r\n        let loc = utc + (1000 * offset)\r\n        let nd = new Date(loc)\r\n\r\n        return nd.toLocaleTimeString();\r\n    }\r\n\r\n    // backbutton to return to city component (searchbar)\r\n    const BackButton = () =>{\r\n        // simple page refresh\r\n        window.location.reload(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <ExitButton>\r\n                <button onClick={BackButton}>\r\n                     <img src={\"https://samalvz.github.io/weather/icons/UI/small-x.png\"} alt={\"close\"} width={\"50%\"} />\r\n                </button>\r\n            </ExitButton>\r\n\r\n            <Location>\r\n                {`\r\n                ${location[0].properties.address_line1}, \r\n                ${location[0].properties.country}\r\n                `}\r\n            </Location>\r\n\r\n            <Temperature>\r\n                {/*Fahrenheit*/}\r\n                Current: {`${Math.floor(weather.data.main.temp)}°F`}\r\n                <br/>\r\n                H: {`${Math.floor(weather.data.main.temp_max)}°F | `}\r\n                L: {`${Math.floor(weather.data.main.temp_min)}°F`}\r\n                <br/>\r\n                <span>\r\n                    Feels Like: {`${Math.floor(weather.data.main.feels_like)}°F`}\r\n                </span>\r\n\r\n                {/*Celsius */}\r\n                {/*<span>H: {`${Math.floor((weather.main.temp_max - 273) * (9/5) + 32)}°F | `}</span>*/}\r\n                {/*<span>L : {`${Math.floor((weather.main.temp_min - 273) * (9/5) + 32)}°F`}</span>*/}\r\n            </Temperature>\r\n\r\n            <LocalTime>\r\n                Local Time: {getLocationTime(weather.data.timezone)}\r\n            </LocalTime>\r\n\r\n            <WeatherCondition>\r\n                <Condition>\r\n                    {weather.data.weather[0].description}\r\n                </Condition>\r\n                <WeatherLogo  src={`https://openweathermap.org/img/wn/${icon}@2x.png`}/>\r\n            </WeatherCondition>\r\n\r\n            <WeatherInfoLabel>Weather Info</WeatherInfoLabel>\r\n\r\n            <WeatherInfoContainer>\r\n                {/*<WeatherInfoComponent*/}\r\n                {/*    name={isDay ? \"Sunset\" : \"Sunrise\"}*/}\r\n                {/*    value={getSunTime(weather.data.sys[isDay ? \"sunset\" : \"sunrise\"], weather.data.timezone, isDay)} // not sure why this has to be lowercase*/}\r\n                {/*/>*/}\r\n                <WeatherInfoComponent\r\n                    name={\"Sunrise\"}\r\n                    value={getSunTime(weather.data.sys[\"sunrise\"], weather.data.timezone)}/>\r\n                <WeatherInfoComponent\r\n                    name={\"Sunset\"}\r\n                    value={getSunTime(weather.data.sys[\"sunset\"], weather.data.timezone)}/>\r\n                <WeatherHumidComponent name={\"Humidity\"} temp={weather.data.main.temp} value={weather.data.main.humidity}/>\r\n                <WeatherInfoComponent name={\"Wind\"} additional={'mph'} value={weather.data.wind.speed}/>\r\n                <WeatherInfoComponent name={\"Pressure\"} additional={'hPa'} value={weather.data.main.pressure}/>\r\n            </WeatherInfoContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherComponent;","import styled from \"styled-components\"\nimport React, {useState} from \"react\"\nimport axios from \"axios\"\n\nimport CityComponent from \"./Modules/CityComponent\";\nimport WeatherComponent from \"./Modules/WeatherInfoComponent\";\n//import WeatherInfoComponent from \"./Modules/WeatherInfoComponent\";\n\n// API keys exposed on git\n// open weather API_KEY\nconst OW_API_KEY = \"0bbbfd796e294a1afc7993e4729a8969\"\n// position stack API_KEY\nconst PS_ACCESS_KEY = `f54d77601783b4a6a134d3920a2e4157`;\n\n// main card\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: auto;\n  align-items: center;\n  box-shadow: 0 3px 6px 0 #555;\n  padding: 20px 10px;\n  border-radius: 4px;\n  width: 380px;\n  background: white;\n  font-family: Montserrat, serif;\n`\n\n\nfunction App() {\n    // users typed in location\n    const [query, updateQuery] = useState('');\n    // exact location returned by Position Stack API\n    const [location, updateLocation] = useState('');\n    // weather returned from Open Weather API (using preciseLocation)\n    const [weather, updateWeather] = useState('');\n\n    // position stack api gets precise location data (coordinates, city, state, country, continent, etc)\n    // todo positionstack returns a list of many locations, it is possible to present this list to users to choose from\n    const fetchLocation = async (e) => {\n        e.preventDefault()\n        let locationResponse = await\n            axios.get(`http://api.positionstack.com/v1/forward?access_key=${PS_ACCESS_KEY}&query=${query}`)\n        await updateLocation(locationResponse.data.data[0])\n\n        // set lat and lon from pos stack\n        let latitude = locationResponse.data.data[0].latitude\n        let longitude = locationResponse.data.data[0].longitude\n        // open weather url building\n        let units = \"imperial\"  // todo currently hardcoded 'imperial' mode\n        let url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}`\n        if (units === \"imperial\") url = url + \"&units=imperial\"\n        url += `&appid=${OW_API_KEY}`\n        // open weather fetch\n        const weatherResponse = await axios.get(url)\n        // update weather state\n        updateWeather(weatherResponse.data)\n    }\n\n    const geolocate = async (e) => {\n        e.preventDefault()\n\n        //todo move this\n        const GEO_API_KEY = '6a81c1c4304f48f4bc9206e60b0d28a1';\n        // Geoapify API fetch\n        const geoUrl = `https://api.geoapify.com/v1/geocode/autocomplete?text=${query}&apiKey=${GEO_API_KEY}`\n        var geoLocation;\n        let latitude;\n        let longitude\n        await axios.get(geoUrl)\n            .then(response=>{\n                geoLocation = response.data.features;\n                updateLocation(geoLocation)\n                latitude = response.data.features[0].properties.lat;\n                longitude = response.data.features[0].properties.lon;\n                //console.log(latitude, longitude)\n            })\n            .catch(error => {\n                console.log('error Geoapfiy', error)\n            })\n\n        let units = \"imperial\"  // todo currently hardcoded 'imperial' mode\n        let url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}`\n        if (units === \"imperial\") url = url + \"&units=imperial\"\n        url += `&appid=${OW_API_KEY}`\n        // open weather fetch\n        await axios.get(url)\n            .then(response =>{\n                // update weather state component with openweather response\n                updateWeather(response)\n            })\n            .catch(error =>{\n                console.log('error open weather', error)\n            })\n    }\n\n    return (\n        <Container>\n            {/*if weather fetched (input entered), then render weather component*/}\n            {weather ?\n                <WeatherComponent location={location} weather={weather}/> :\n                <CityComponent updateQuery={updateQuery} fetchLocation={geolocate}/>\n            }\n        </Container>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}