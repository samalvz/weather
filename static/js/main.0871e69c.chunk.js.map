{"version":3,"sources":["Modules/CityComponent.js","Modules/WeatherInfoComponent.js","App.js","index.js"],"names":["SearchBox","styled","img","span","form","CityComponent","props","updateLocation","fetchLocation","onSubmit","placeholder","onChange","e","target","value","type","WeatherInfoIcons","Sunset","Sunrise","Humidity","Wind","Pressure","WeatherIcons","WeatherCondition","div","LocalTime","Location","Temperature","Condition","WeatherLogo","WeatherInfoLabel","WeatherInfoContainer","InfoContainer","InfoIcon","InfoLabel","WeatherInfoComponent","name","src","WeatherComponent","location","weather","isDay","icon","includes","label","Math","floor","main","temp_max","temp_min","feels_like","offset","d","Date","localTime","getTime","localOffset","getTimezoneOffset","toLocaleTimeString","getLocationTime","timezone","description","timeStamp","nd","getSunTime","sys","humidity","wind","speed","pressure","Container","App","useState","preciseLocation","updatePresLoc","updateWeather","a","preventDefault","axios","get","locationResponse","data","latitude","longitude","url","weatherResponse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0871e69c.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\n//region styled area\r\nconst WeatherLogo = styled.img`\r\n  width: 140px;\r\n  height: 140px;\r\n  margin: 40px;\r\n`\r\nconst CityInput = styled.span`\r\n  color: black;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin: 10px auto;\r\n`\r\nconst SearchBox = styled.form`\r\n  display: flex;\r\n  flex-direction: row;\r\n  border: black solid 1px;\r\n  border-radius: 4px;\r\n  color: black;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin: 20px auto;\r\n\r\n  & input {\r\n    padding: 10px;\r\n    font-size: 14px;\r\n    border: none;\r\n    outline: none;\r\n    font-weight: bold;\r\n  }\r\n\r\n  & button {\r\n    padding: 10px;\r\n    font-size: 14px;\r\n    color: white;\r\n    background-color: black;\r\n    border: none;\r\n    outline: none;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n  }\r\n`\r\n//endregion\r\n\r\nconst CityComponent = (props) => {\r\n    const {updateLocation, fetchLocation} = props\r\n\r\n    return (\r\n        //fragment\r\n        <>\r\n            {/*<WeatherLogo src={\"./icons/perfect-day.svg\"}/>*/}\r\n            {/*<CityInput>Weather</CityInput>*/}\r\n            <SearchBox onSubmit={fetchLocation} >\r\n            {/*<SearchBox onSubmit={getWeather}>*/}\r\n                <input placeholder={\"Enter a location \"}\r\n                       // onChange={(e)=> InputHandler(e.target.value)}\r\n                       onChange={(e)=> updateLocation(e.target.value)}\r\n\r\n                />\r\n                <button type={\"submit\"}>Search</button>\r\n            </SearchBox>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CityComponent;","import styled from \"styled-components\"\r\n\r\n// region icons\r\nexport const WeatherInfoIcons = {\r\n    Sunset: \"./icons/temp.svg\",\r\n    Sunrise: \"./icons/temp.svg\",\r\n    Humidity: \"./icons/humidity.svg\",\r\n    Wind: \"./icons/wind.svg\",\r\n    Pressure: \"./icons/pressure.svg\",\r\n}\r\n\r\nexport const WeatherIcons = {\r\n    //todo some weather conditions have no icons (e.g. 50n for mist)\r\n    \"01d\": \"./icons/sunny.svg\",\r\n    \"01n\": \"./icons/night.svg\",\r\n    \"02d\": \"./icons/day.svg\",\r\n    \"02n\": \"./icons/cloudy-night.svg\",\r\n    \"03d\": \"./icons/cloudy.svg\",\r\n    \"03n\": \"./icons/cloudy.svg\",\r\n    \"04d\": \"./icons/perfect-day.svg\",\r\n    \"04n\": \"./icons/cloudy-night.svg\",\r\n    \"09d\": \"./icons/rain.svg\",\r\n    \"09n\": \"./icons/rain-night.svg\",\r\n    \"10d\": \"./icons/rain.svg\",\r\n    \"10n\": \"./icons/rain-night.svg\",\r\n    \"11d\": \"./icons/storm.svg\",\r\n    \"11n\": \"./icons/storm.svg\",\r\n}\r\n//endregion\r\n\r\n//region styled region\r\nconst ExitButton = styled.span\r\n    `\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-content: flex-start;\r\n      width: 100%; \r\n      & button {\r\n        width: 10%;\r\n        border: none;\r\n        background-color: transparent;\r\n        cursor: pointer;\r\n      }\r\n    `\r\n\r\nconst WeatherCondition = styled.div\r\n    `\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      width: 100%;\r\n      justify-content: space-between;\r\n      margin: 30px auto;\r\n\r\n    `\r\nconst LocalTime = styled.span\r\n    `\r\n      display: flex;\r\n      flex-direction: row;\r\n      justify-content: left;\r\n    `\r\nconst Location = styled.span\r\n    `\r\n      font-size: 28px;\r\n      text-transform: capitalize;\r\n      font-weight: bold;\r\n      margin: 15px auto;\r\n    `\r\n\r\nconst Temperature = styled.span\r\n    `\r\n      margin: 0 0 10px;\r\n      text-transform: capitalize;\r\n      text-align: center;\r\n      font-size: 14px;\r\n      //background: grey;\r\n      & span {\r\n        font-size: 20px\r\n      }\r\n    `\r\n\r\nconst Condition = styled.span\r\n    `\r\n      margin: 5px auto 10px auto;\r\n      text-transform: capitalize;\r\n      font-size: 18px;\r\n      //background: lightcoral;\r\n      & span {\r\n        font-size: 15px;\r\n        font-weight: lighter;\r\n      }\r\n    `\r\n\r\nconst WeatherLogo = styled.img\r\n    `\r\n      width: 100px;\r\n      height: 100px;\r\n      margin: 5px auto auto auto;\r\n    `\r\n\r\nconst WeatherInfoLabel = styled.span\r\n    `\r\n      font-size: 14px;\r\n      font-weight: bold;\r\n      margin: 5px 25px 10px;\r\n      text-align: start;\r\n      width: 90%;\r\n    `\r\n\r\nconst WeatherInfoContainer = styled.span\r\n    `\r\n      display: flex;\r\n      width: 90%;\r\n      flex-direction: row;\r\n      justify-content: space-evenly;\r\n      align-items: center;\r\n      flex-wrap: wrap;\r\n    `\r\n\r\nconst InfoContainer = styled.div\r\n    `\r\n      display: flex;\r\n      margin: 5px 10px;\r\n      flex-direction: row;\r\n      justify-content: space-evenly;\r\n      align-items: center;\r\n    `\r\n\r\nconst InfoIcon = styled.img\r\n    `\r\n      width: 36px;\r\n      height: 36px;\r\n    `\r\n\r\nconst InfoLabel = styled.div\r\n    `\r\n      display: flex;\r\n      flex-direction: column;\r\n      font-size: 14px;\r\n      margin: 15px;\r\n\r\n      &span {\r\n        font-size: 12px;\r\n        text-transform: capitalize;\r\n      }\r\n    `\r\n//endregion\r\n\r\nconst WeatherInfoComponent = (props) => {\r\n    const {name, value} = props;\r\n    return (\r\n        <InfoContainer>\r\n            <InfoIcon src={WeatherInfoIcons[name]}/>\r\n            <InfoLabel>\r\n                {value}\r\n                <span>{name}</span>\r\n            </InfoLabel>\r\n        </InfoContainer>\r\n    )\r\n}\r\n\r\nconst WeatherComponent = (props) => {\r\n    const {location, weather} = props;\r\n    const isDay = weather.weather[0].icon.includes(\"d\");\r\n\r\n    // use provided sunrise/set time and convert to location's local time\r\n    const getSunTime = (timeStamp, timezone, isDay) => {\r\n        let d = new Date(timeStamp * 1000)\r\n        let localOffset = d.getTimezoneOffset() * 60000;\r\n        let nd = (d.getTime() + localOffset) + (1000 * timezone)\r\n        let sunTime = new Date(nd)\r\n\r\n        return (sunTime.toLocaleTimeString())\r\n    }\r\n\r\n    // use location timezone to display local time\r\n    const getLocationTime = (offset) =>{\r\n        let d = new Date()\r\n        let localTime = d.getTime()\r\n        let localOffset = d.getTimezoneOffset() * 60000;\r\n        let utc = localTime + localOffset\r\n        let loc = utc + (1000 * offset)\r\n        let nd = new Date(loc)\r\n\r\n        return nd.toLocaleTimeString();\r\n    }\r\n\r\n    // backbutton to return to city component (searchbar)\r\n    const BackButton = () =>{\r\n        //todo add button functionality\r\n        console.log(\"go back button\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/*<ExitButton>*/}\r\n            {/*    <button onClick={BackButton}>*/}\r\n             {/*        <img src={\"./icons/UI/small-x.png\"} alt={\"close\"} width={\"50%\"} />*/}\r\n            {/*    </button>*/}\r\n            {/*</ExitButton>*/}\r\n\r\n            <Location>\r\n                {`${location.label}`}</Location>\r\n\r\n            <Temperature>\r\n                {/*Fahrenheit*/}\r\n                <span>H: {`${Math.floor(weather.main.temp_max)}°F | `}</span>\r\n                <span>L : {`${Math.floor(weather.main.temp_min)}°F`}</span>\r\n                <br/>Feels Like: {`${Math.floor(weather.main.feels_like)}°F`}\r\n                {/*Celsius */}\r\n                {/*<span>H: {`${Math.floor((weather.main.temp_max - 273) * (9/5) + 32)}°F | `}</span>*/}\r\n                {/*<span>L : {`${Math.floor((weather.main.temp_min - 273) * (9/5) + 32)}°F`}</span>*/}\r\n            </Temperature>\r\n\r\n            <LocalTime>\r\n                Local Time: {getLocationTime(weather.timezone)}\r\n            </LocalTime>\r\n\r\n            <WeatherCondition>\r\n                <Condition>\r\n                    {weather.weather[0].main}\r\n                    <br/>\r\n                    <span>{weather.weather[0].description}</span>\r\n                </Condition>\r\n                <WeatherLogo src={WeatherIcons[weather.weather[0].icon]}/>\r\n            </WeatherCondition>\r\n\r\n            <WeatherInfoLabel>Weather Info</WeatherInfoLabel>\r\n\r\n            <WeatherInfoContainer>\r\n                <WeatherInfoComponent\r\n                    name={isDay ? \"Sunset\" : \"Sunrise\"}\r\n                    value={getSunTime(weather.sys[isDay ? \"sunset\" : \"sunrise\"], weather.timezone, isDay)} // not sure why this has to be lowercase\r\n                />\r\n                <WeatherInfoComponent name={\"Humidity\"} value={weather.main.humidity}/>\r\n                <WeatherInfoComponent name={\"Wind\"} value={weather.wind.speed}/>\r\n                <WeatherInfoComponent name={\"Pressure\"} value={weather.main.pressure}/>\r\n            </WeatherInfoContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherComponent;","import styled from \"styled-components\"\nimport React, {useState} from \"react\"\nimport axios from \"axios\"\n\nimport CityComponent from \"./Modules/CityComponent\";\nimport WeatherComponent from \"./Modules/WeatherInfoComponent\";\n//import WeatherInfoComponent from \"./Modules/WeatherInfoComponent\";\n\n// API keys exposed on git\n// open weather API_KEY\nconst OW_API_KEY = \"0bbbfd796e294a1afc7993e4729a8969\"\n// position stack API_KEY\nconst PS_ACCESS_KEY = `f54d77601783b4a6a134d3920a2e4157`;\n\n// main card\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: auto;\n  align-items: center;\n  box-shadow: 0 3px 6px 0 #555;\n  padding: 20px 10px;\n  border-radius: 4px;\n  width: 380px;\n  background: white;\n  font-family: Montserrat,serif;\n`\n\n\nfunction App() {\n    // users typed in location\n    const [location, updateLocation] = useState('');\n    // exact location returned by Position Stack API\n    const [preciseLocation, updatePresLoc] = useState('');\n    // weather returned from Open Weather API (using preciseLocation)\n    const [weather, updateWeather] = useState('');\n\n    // position stack api gets precise location data (coordinates, city, state, country, continent, etc)\n    // todo positionstack returns a list of many locations, it is possible to present this list to users to choose from\n    const fetchLocation = async(e) => {\n        e.preventDefault()\n        let locationResponse = await\n            axios.get(`http://api.positionstack.com/v1/forward?access_key=${PS_ACCESS_KEY}&query=${location}`)\n        await updatePresLoc(locationResponse.data.data[0])\n\n        // set lat and lon from pos stack\n        let latitude = locationResponse.data.data[0].latitude\n        let longitude = locationResponse.data.data[0].longitude\n        // open weather url building\n        let units = \"imperial\"  // todo currently hardcoded 'imperial' mode\n        let url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}`\n        if (units === \"imperial\") url = url + \"&units=imperial\"\n        url += `&appid=${OW_API_KEY}`\n        // open weather fetch\n        const weatherResponse = await axios.get(url)\n        // update weather state\n        updateWeather(weatherResponse.data)\n    }\n\n    return (\n        <Container>\n            {/*if weather fetched (input entered), then render weather component*/}\n            {weather ?\n                <WeatherComponent location={preciseLocation} weather={weather}/> :\n                <CityComponent updateLocation={updateLocation} fetchLocation={fetchLocation}/>\n            }\n        </Container>\n    )\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}